var N = null;var searchIndex = {};
searchIndex["codegen"]={"doc":"Provides a builder API for generating Rust code.","items":[[3,"Scope","codegen","Defines a scope.",N,N],[3,"Module","","Defines a module.",N,N],[3,"Enum","","Defines an enumeration.",N,N],[3,"Struct","","Defines a struct.",N,N],[3,"Trait","","Define a trait.",N,N],[3,"Type","","Defines a type.",N,N],[3,"Variant","","Defines an enum variant.",N,N],[3,"AssociatedType","","Defines an associated type.",N,N],[3,"Impl","","Defines an impl block.",N,N],[3,"Import","","Defines an import (`use` statement).",N,N],[3,"Function","","Defines a function.",N,N],[3,"Block","","Defines a code block. This is used to define a function body.",N,N],[3,"Formatter","","Configures how a scope is formatted.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["scope"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["module"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["enum"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["struct"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["trait"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["type"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["associatedtype"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["impl"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["import"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["function"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["block"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a new scope",0,[[],["self"]]],[11,"import","","Import a type into the scope.",0,[[["self"],["str"],["str"]],["import"]]],[11,"new_module","","Push a new module definition, returning a mutable reference to it.",0,[[["self"],["str"]],["module"]]],[11,"get_module_mut","","Returns a mutable reference to a module if it is exists in this scope.",0,[[["self"],["q"]],["option",["module"]]]],[11,"get_module","","Returns a mutable reference to a module if it is exists in this scope.",0,[[["self"],["q"]],["option",["module"]]]],[11,"get_or_new_module","","Returns a mutable reference to a module, creating it if it does not exist.",0,[[["self"],["str"]],["module"]]],[11,"push_module","","Push a module definition.",0,[[["self"],["module"]],["self"]]],[11,"new_struct","","Push a new struct definition, returning a mutable reference to it.",0,[[["self"],["str"]],["struct"]]],[11,"push_struct","","Push a struct definition",0,[[["self"],["struct"]],["self"]]],[11,"new_trait","","Push a new trait definition, returning a mutable reference to it.",0,[[["self"],["str"]],["trait"]]],[11,"push_trait","","Push a trait definition",0,[[["self"],["trait"]],["self"]]],[11,"new_enum","","Push a new struct definition, returning a mutable reference to it.",0,[[["self"],["str"]],["enum"]]],[11,"push_enum","","Push a structure definition",0,[[["self"],["enum"]],["self"]]],[11,"new_impl","","Push a new `impl` block, returning a mutable reference to it.",0,[[["self"],["str"]],["impl"]]],[11,"push_impl","","Push an `impl` block.",0,[[["self"],["impl"]],["self"]]],[11,"raw","","Push a raw string to the scope.",0,[[["self"],["str"]],["self"]]],[11,"to_string","","Return a string representation of the scope.",0,[[["self"]],["string"]]],[11,"fmt","","Formats the scope using the given formatter.",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Return a new, blank module",1,[[["str"]],["self"]]],[11,"scope","","Returns a mutable reference to the module's scope.",1,[[["self"]],["scope"]]],[11,"vis","","Set the module visibility.",1,[[["self"],["str"]],["self"]]],[11,"import","","Import a type into the module's scope.",1,[[["self"],["str"],["str"]],["self"]]],[11,"new_module","","Push a new module definition, returning a mutable reference to it.",1,[[["self"],["str"]],["module"]]],[11,"get_module","","Returns a reference to a module if it is exists in this scope.",1,[[["self"],["q"]],["option",["module"]]]],[11,"get_module_mut","","Returns a mutable reference to a module if it is exists in this scope.",1,[[["self"],["q"]],["option",["module"]]]],[11,"get_or_new_module","","Returns a mutable reference to a module, creating it if it does not exist.",1,[[["self"],["str"]],["module"]]],[11,"push_module","","Push a module definition.",1,[[["self"],["module"]],["self"]]],[11,"new_struct","","Push a new struct definition, returning a mutable reference to it.",1,[[["self"],["str"]],["struct"]]],[11,"push_struct","","Push a structure definition",1,[[["self"],["struct"]],["self"]]],[11,"new_enum","","Push a new enum definition, returning a mutable reference to it.",1,[[["self"],["str"]],["enum"]]],[11,"push_enum","","Push an enum definition",1,[[["self"],["enum"]],["self"]]],[11,"new_impl","","Push a new `impl` block, returning a mutable reference to it.",1,[[["self"],["str"]],["impl"]]],[11,"push_impl","","Push an `impl` block.",1,[[["self"],["impl"]],["self"]]],[11,"fmt","","Formats the module using the given formatter.",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Return a structure definition with the provided name",3,[[["str"]],["self"]]],[11,"ty","","Returns a reference to the type",3,[[["self"]],["type"]]],[11,"vis","","Set the structure visibility.",3,[[["self"],["str"]],["self"]]],[11,"generic","","Add a generic to the struct.",3,[[["self"],["str"]],["self"]]],[11,"bound","","Add a `where` bound to the struct.",3,[[["self"],["str"],["t"]],["self"]]],[11,"doc","","Set the structure documentation.",3,[[["self"],["str"]],["self"]]],[11,"derive","","Add a new type that the struct should derive.",3,[[["self"],["str"]],["self"]]],[11,"field","","Add a named field to the struct.",3,[[["self"],["str"],["t"]],["self"]]],[11,"tuple_field","","Add a tuple field to the struct.",3,[[["self"],["t"]],["self"]]],[11,"fmt","","Formats the struct using the given formatter.",3,[[["self"],["formatter"]],["result"]]],[11,"new","","Return a trait definition with the provided name",4,[[["str"]],["self"]]],[11,"ty","","Returns a reference to the type",4,[[["self"]],["type"]]],[11,"vis","","Set the trait visibility.",4,[[["self"],["str"]],["self"]]],[11,"generic","","Add a generic to the trait",4,[[["self"],["str"]],["self"]]],[11,"bound","","Add a `where` bound to the trait.",4,[[["self"],["str"],["t"]],["self"]]],[11,"parent","","Add a parent trait.",4,[[["self"],["t"]],["self"]]],[11,"doc","","Set the trait documentation.",4,[[["self"],["str"]],["self"]]],[11,"associated_type","","Add an associated type. Returns a mutable reference to the new associated type for futher configuration.",4,[[["self"],["str"]],["associatedtype"]]],[11,"new_fn","","Push a new function definition, returning a mutable reference to it.",4,[[["self"],["str"]],["function"]]],[11,"push_fn","","Push a function definition.",4,[[["self"],["function"]],["self"]]],[11,"fmt","","Formats the scope using the given formatter.",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Return a enum definition with the provided name.",2,[[["str"]],["self"]]],[11,"ty","","Returns a reference to the type.",2,[[["self"]],["type"]]],[11,"vis","","Set the enum visibility.",2,[[["self"],["str"]],["self"]]],[11,"generic","","Add a generic to the enum.",2,[[["self"],["str"]],["self"]]],[11,"bound","","Add a `where` bound to the enum.",2,[[["self"],["str"],["t"]],["self"]]],[11,"doc","","Set the enum documentation.",2,[[["self"],["str"]],["self"]]],[11,"derive","","Add a new type that the struct should derive.",2,[[["self"],["str"]],["self"]]],[11,"new_variant","","Push a variant to the enum, returning a mutable reference to it.",2,[[["self"],["str"]],["variant"]]],[11,"push_variant","","Push a variant to the enum.",2,[[["self"],["variant"]],["self"]]],[11,"fmt","","Formats the enum using the given formatter.",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Return a new enum variant with the given name.",6,[[["str"]],["self"]]],[11,"named","","Add a named field to the variant.",6,[[["self"],["str"],["t"]],["self"]]],[11,"tuple","","Add a tuple field to the variant.",6,[[["self"],["str"]],["self"]]],[11,"fmt","","Formats the variant using the given formatter.",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Return a new type with the given name.",5,[[["str"]],["self"]]],[11,"generic","","Add a generic to the type.",5,[[["self"],["t"]],["self"]]],[11,"path","","Rewrite the `Type` with the provided path",5,[[["self"],["str"]],["type"]]],[11,"fmt","","Formats the struct using the given formatter.",5,[[["self"],["formatter"]],["result"]]],[11,"from","","",5,[[["str"]],["self"]]],[11,"from","","",5,[[["string"]],["self"]]],[11,"from","","",5,[[["string"]],["self"]]],[11,"from","","",5,[[["type"]],["self"]]],[11,"bound","","Add a bound to the associated type.",7,[[["self"],["t"]],["self"]]],[11,"new","","Return a new impl definition",8,[[["t"]],["self"]]],[11,"generic","","Add a generic to the impl block.",8,[[["self"],["str"]],["self"]]],[11,"target_generic","","Add a generic to the target type.",8,[[["self"],["t"]],["self"]]],[11,"impl_trait","","Set the trait that the impl block is implementing.",8,[[["self"],["t"]],["self"]]],[11,"associate_type","","Set an associated type.",8,[[["self"],["str"],["t"]],["self"]]],[11,"bound","","Add a `where` bound to the impl block.",8,[[["self"],["str"],["t"]],["self"]]],[11,"new_fn","","Push a new function definition, returning a mutable reference to it.",8,[[["self"],["str"]],["function"]]],[11,"push_fn","","Push a function definition.",8,[[["self"],["function"]],["self"]]],[11,"fmt","","Formats the impl block using the given formatter.",8,[[["self"],["formatter"]],["result"]]],[11,"new","","Return a new import.",9,[[["str"],["str"]],["self"]]],[11,"vis","","Set the import visibility.",9,[[["self"],["str"]],["self"]]],[11,"new","","Return a new function definition.",10,[[["str"]],["self"]]],[11,"doc","","Set the function documentation.",10,[[["self"],["str"]],["self"]]],[11,"vis","","Set the function visibility.",10,[[["self"],["str"]],["self"]]],[11,"generic","","Add a generic to the function.",10,[[["self"],["str"]],["self"]]],[11,"arg_self","","Add `self` as a function argument.",10,[[["self"]],["self"]]],[11,"arg_ref_self","","Add `&self` as a function argument.",10,[[["self"]],["self"]]],[11,"arg_mut_self","","Add `&mut self` as a function argument.",10,[[["self"]],["self"]]],[11,"arg","","Add a function argument.",10,[[["self"],["str"],["t"]],["self"]]],[11,"ret","","Set the function return type.",10,[[["self"],["t"]],["self"]]],[11,"bound","","Add a `where` bound to the function.",10,[[["self"],["str"],["t"]],["self"]]],[11,"line","","Push a line to the function implementation.",10,[[["self"],["t"]],["self"]]],[11,"push_block","","Push a block to the function implementation",10,[[["self"],["block"]],["self"]]],[11,"fmt","","Formats the function using the given formatter.",10,[[["self"],["bool"],["formatter"]],["result"]]],[11,"new","","Returns an empty code block.",11,[[["str"]],["self"]]],[11,"line","","Push a line to the code block.",11,[[["self"],["t"]],["self"]]],[11,"push_block","","Push a nested block to this block.",11,[[["self"],["block"]],["self"]]],[11,"after","","Add a snippet after the block.",11,[[["self"],["str"]],["self"]]],[11,"fmt","","Formats the block using the given formatter.",11,[[["self"],["formatter"]],["result"]]],[11,"new","","Return a new formatter that writes to the given string.",12,[[["string"]],["self"]]],[11,"write_str","","",12,[[["self"],["str"]],["result"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]]],"paths":[[3,"Scope"],[3,"Module"],[3,"Enum"],[3,"Struct"],[3,"Trait"],[3,"Type"],[3,"Variant"],[3,"AssociatedType"],[3,"Impl"],[3,"Import"],[3,"Function"],[3,"Block"],[3,"Formatter"]]};
initSearch(searchIndex);
